/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[5,8,21,39,40,41,42,43],$V8=[1,23],$V9=[24,27],$Va=[2,19],$Vb=[1,26],$Vc=[1,29],$Vd=[1,37],$Ve=[1,35],$Vf=[1,33],$Vg=[1,40],$Vh=[1,39],$Vi=[1,36],$Vj=[1,38],$Vk=[1,42],$Vl=[1,43],$Vm=[5,8,14,21,24,39,40,41,42,43,52,60,61,65,66,67,76],$Vn=[11,24],$Vo=[1,53],$Vp=[11,24,32,70,71,72,92],$Vq=[2,93],$Vr=[1,57],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[2,104],$Vw=[1,58],$Vx=[1,60],$Vy=[11,24,32,70,71,72,75,84,85,88,89,90,91,92],$Vz=[1,68],$VA=[1,106],$VB=[1,103],$VC=[1,102],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[11,27],$VI=[14,21,39,40,41,42,43,52,61,65,66,67,76],$VJ=[14,21,39,40,41,42,43,52,60,61,65,66,67,76],$VK=[14,21,24,39,40,41,42,43,52,60,61,65,66,67,76],$VL=[1,135],$VM=[11,24,70,71],$VN=[1,185],$VO=[14,80,83],$VP=[1,214],$VQ=[1,215],$VR=[14,24,80,83];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"inicio":4,"EOF":5,"opciones":6,"main":7,"VOID":8,"MAIN":9,"PARABRE":10,"PARCIERRA":11,"LLAVEABRE":12,"sentencia_Listado":13,"LLAVECIERRA":14,"tipoDato":15,"opciones1":16,"asignacion":17,"metodo":18,"declaracion":19,"funcion":20,"ID":21,"IGUAL":22,"expresion":23,"PTCOMA":24,"variablesManejo":25,"IDmas":26,"COMA":27,"expCadena":28,"declaredFuncion":29,"paramDeclared":30,"cadenaConcat":31,"MAS":32,"CADENA":33,"CARACTER":34,"parametros":35,"sentencia_listado":36,"funcion2":37,"tipoMetodo":38,"INT":39,"DOUBLE":40,"STRING":41,"CHAR":42,"BOOL":43,"sentencia":44,"while":45,"do-while":46,"for":47,"switchCase":48,"ifS":49,"sentenciaIfElse":50,"imprimir":51,"CONSOLE":52,"PUNTO":53,"WRITE":54,"cuerpoImprimir":55,"HTMLPROD":56,"sentenciaCiclos":57,"sentenciaCiclos2":58,"ifbreak":59,"ELSE":60,"IF":61,"ExpresionLogica":62,"ifBreak":63,"BREAK":64,"WHILE":65,"DO":66,"FOR":67,"incremento":68,"condicionRelacional":69,"AND":70,"OR":71,"NOT":72,"aumento":73,"exp":74,"MENOS":75,"SWITCH":76,"cuerpoCase":77,"default":78,"case":79,"CASE":80,"DOSPUNTOS":81,"sentenciaBreakCase":82,"DEFAULT":83,"POR":84,"DIVIDIDO":85,"ENTERO":86,"booleanos":87,"MENOSIGUAL":88,"MASIGUAL":89,"MASQUE":90,"MENOSQUE":91,"IGUALQUE":92,"TRUE":93,"FALSE":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"VOID",9:"MAIN",10:"PARABRE",11:"PARCIERRA",12:"LLAVEABRE",13:"sentencia_Listado",14:"LLAVECIERRA",21:"ID",22:"IGUAL",24:"PTCOMA",27:"COMA",32:"MAS",33:"CADENA",34:"CARACTER",39:"INT",40:"DOUBLE",41:"STRING",42:"CHAR",43:"BOOL",52:"CONSOLE",53:"PUNTO",54:"WRITE",56:"HTMLPROD",59:"ifbreak",60:"ELSE",61:"IF",64:"BREAK",65:"WHILE",66:"DO",67:"FOR",70:"AND",71:"OR",72:"NOT",75:"MENOS",76:"SWITCH",80:"CASE",81:"DOSPUNTOS",83:"DEFAULT",84:"POR",85:"DIVIDIDO",86:"ENTERO",88:"MENOSIGUAL",89:"MASIGUAL",90:"MASQUE",91:"MENOSQUE",92:"IGUALQUE",93:"TRUE",94:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,7],[7,6],[6,2],[6,1],[6,1],[6,1],[16,1],[16,1],[17,4],[25,1],[25,2],[19,4],[19,2],[26,3],[26,1],[23,1],[23,1],[29,3],[30,2],[30,1],[31,3],[31,3],[31,1],[31,1],[18,8],[18,7],[18,6],[18,7],[20,3],[37,5],[37,4],[35,4],[35,2],[38,1],[15,1],[15,1],[15,1],[15,1],[15,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,2],[51,7],[55,1],[55,1],[57,2],[57,1],[58,1],[58,1],[36,2],[36,1],[50,5],[50,4],[49,5],[49,7],[49,6],[63,6],[63,8],[45,7],[46,9],[47,11],[62,3],[62,3],[62,2],[62,1],[68,1],[68,1],[73,3],[73,3],[48,7],[48,9],[77,2],[77,1],[79,4],[79,4],[78,3],[78,2],[82,1],[82,3],[82,2],[28,3],[28,1],[28,1],[74,2],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,1],[74,1],[74,1],[74,1],[74,1],[69,3],[69,3],[69,3],[69,3],[69,3],[69,4],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		module.exports.variables1;
		module.exports.HTMLARCH=html1;
		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; console.log('finopciones');console.log(variables1.length);
break;
case 3:
this.$=[$$[$0]];console.log('opciones'); ID='';
break;
case 4:
 console.error('Este es un error sint√°ctico if: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
	 erroresSintacticos.push(new Error( this._$.first_line ,this._$.first_column, yytext));
break;
case 5:
this.$=FORMISTR.funcionMain($$[$0-1]);
break;
case 6:
this.$=FORMISTR.funcionMainVacio();
break;
case 7:
this.$=FORMISTR.funcionOpcionesOP1($$[$0-1],$$[$0]);console.log('opciones1 ');
break;
case 8:
this.$=FORMISTR.funcionOpcionesA($$[$0]);console.log('asig');
break;
case 9:
this.$= FORMISTR.funcionOpcionesF($$[$0]);console.log('metodo');
break;
case 10:
this.$= FORMISTR.funcionOpcionesMain($$[$0]);console.log('main');
break;
case 11:
this.$= FORMISTR.funcionOpciones12($$[$0]);console.log('declaracion');
break;
case 12:
this.$= FORMISTR.funcionOPciones11($$[$0]);console.log('funcion');
break;
case 13:
this.$=FORMISTR.asignacionVariable($$[$0-3], $$[$0-1]);
break;
case 14:
this.$=FORMISTR.variableManejo($$[$0]);console.log('asig');
break;
case 15:
this.$=FORMISTR.variableManejo2($$[$0-1] ,$$[$0]); variables1.push(new VariableN($$[$0-1], ID , this._$.first_line ));
break;
case 16:
this.$=FORMISTR.funciondDeclaracion1($$[$0-3],$$[$0-1]);console.log('declaracion1'); ID= $$[$0-3];
break;
case 17:
this.$=FORMISTR.funciondDeclaracion2($$[$0-1]);console.log('declaracion2');
break;
case 18:
$$[$0-2].push(FORMISTR.funcionIDMAS($$[$0-1])); this.$ = $$[$0-2];console.log('ID2');ID= ID+', '+$$[$0-1];
break;
case 19:
this.$=FORMISTR.funcionIDMAS($$[$0]);console.log('id1'); ID= $$[$0]
break;
case 20:
this.$=FORMISTR.funcionExpresion1($$[$0]);
break;
case 21:
this.$=FORMISTR.funcionExpresion3($$[$02]);
break;
case 22:
this.$=FORMISTR.functionFUncionDeclared($$[$0-2],$$[$0]);console.log("declaredFuncion");
break;
case 23:
this.$=FORMISTR.funcionParamDeclared($$[$0-1]);{console.log('ended');}
break;
case 24:
this.$=FORMISTR.funcionParamDeclared(' '); console.log('paramDeclared )');
break;
case 25:
$$[$0-2].push(FORMISTR.funcionCadenaConcat1($$[$0]));this.$ =$$[$0-2];
break;
case 26:
$$[$0-2].push(FORMISTR.funcionCadenaConcat2($$[$0]));this.$ =$$[$0-2];
break;
case 27:
this.$=FORMISTR.funcionCadenaConcat1($$[$0]);
break;
case 28:
this.$=FORMISTR.funcionCadenaConcat2($$[$0]);
break;
case 29:
this.$=FORMISTR.funcionNuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);console.log('METODO');
break;
case 30:
this.$=FORMISTR.funcionNuevoMetodo($$[$0-5],$$[$0-3],' ');console.log('METODO1');
break;
case 31:
this.$=FORMISTR.funcionNuevoMetodo($$[$0-4],' ',' ');console.log('METODO2');
break;
case 32:
this.$=FORMISTR.funcionNuevoMetodo($$[$0-5],' ',$$[$0-1]);console.log('METODO3');
break;
case 33:
this.$=FORMISTR.funcionNuevafuncion(' ',$$[$0-2],$$[$0]);
break;
case 34:
this.$=FORMISTR.funcionFuncion2($$[$0-4],$$[$0-1]);
break;
case 35:
this.$=FORMISTR.funcionFuncion2(undefined, $$[$0-1]);
break;
case 36:
$$[$0-3].push(FORMISTR.funcionParametros1($$[$0-1] , $$[$0])); this.$=$$[$0-3] ; console.log('tiposDato');
break;
case 37:
this.$ = [FORMISTR.funcionParametros2($$[$0-1])]; console.log('tipoDatoS');
break;
case 38:
this.$=FORMISTR.funcionTipoMetodo($$[$0]);
break;
case 39:
this.$= 'int';
break;
case 40:
this.$= 'double';
break;
case 41:
this.$= 'string';
break;
case 42:
this.$= 'char';
break;
case 43:
this.$= 'bool';
break;
case 44:
this.$= FORMISTR.funcionSentencia1($$[$0]);
break;
case 45:
this.$= FORMISTR.funcionSentencia2($$[$0]);
break;
case 46:
this.$= FORMISTR.funcionSentencia3($$[$0]);
break;
case 47:
this.$= FORMISTR.funcionSentencia4($$[$0]);
break;
case 48:
this.$= FORMISTR.funcionSentencia5($$[$0]);
break;
case 49:
this.$= FORMISTR.funcionSentencia6($$[$0]);
break;
case 50:
this.$= FORMISTR.funcionSentencia7($$[$0]);
break;
case 51:
this.$= FORMISTR.funcionSentencia8($$[$0]);
break;
case 52:
console.log('declaredFuncion');this.$= FORMISTR.funcionSentencia9($$[$0-1]);
break;
case 53:
this.$= FORMISTR.funcionImprimir($$[$0-2]);
break;
case 54:
this.$= FORMISTR.funcionCuerpoImprimir($$[$0]);html1=html1+$$[$0]+'\n';
break;
case 55:
this.$= FORMISTR.funcionCuerpoImprimir2($$[$0]);
break;
case 56:
$$[$0-1].push(FORMISTR.fucionSentenciaCiclos($$[$0])); this.$= $$[$0-1];
break;
case 57:
this.$ = [FORMISTR.fucionSentenciaCiclos($$[$0])];
break;
case 58:
this.$=FORMISTR.fucionSentenciaCiclos2_1($$[$0]);
break;
case 59:
this.$=FORMISTR.fucionSentenciaCiclos2_2($$[$0]);
break;
case 60:
 $$[$0-1].push(FORMISTR.fucionSentencia_listado($$[$0])); this.$= $$[$0-1] ; 
break;
case 61:
this.$ = [FORMISTR.fucionSentencia_listado($$[$0])]; console.log('sentenciaListado');
break;
case 62:
this.$=FORMISTR.fucionSentenciaIfElse2($$[$0-4],$$[$0-1]);
break;
case 63:
this.$=FORMISTR.fucionSentenciaIfElse2($$[$0-3],' ');
break;
case 64:
this.$=FORMISTR.funcionIf1($$[$0-2],$$[$0]);console.log('if 1');
break;
case 65:
this.$=FORMISTR.funcionIf2($$[$0-4],$$[$0-1]);console.log('if 2');
break;
case 66:
this.$=FORMISTR.funcionIf2($$[$0-3], ' ');console.log('if vacio');
break;
case 67:
this.$=FORMISTR.funcionIfBreak1($$[$0-3]);console.log('if 1');
break;
case 68:
this.$=FORMISTR.funcionIfBreak2($$[$0-5],$$[$0-2]);console.log('if 2');
break;
case 69:
this.$=FORMISTR.funcionWhile($$[$0-4],$$[$0-1]);
break;
case 70:
this.$=FORMISTR.funcionDo_While($$[$0-2], $$[$0-6]);
break;
case 71:
this.$=FORMISTR.funcionFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 72:
this.$=FORMISTR.funcioneExpresionLogica($$[$0-2], $$[$0], '&&');
break;
case 73:
this.$=FORMISTR.funcioneExpresionLogica($$[$0-2], $$[$0], '||');
break;
case 74:
this.$=FORMISTR.funcioneExpresionLogicaNot($$[$0]);
break;
case 75:
this.$=$$[$0];
break;
case 76:
this.$=FORMISTR.funcionIncremento1($$[$0]);
break;
case 77:
this.$=FORMISTR.funcionIncremento2($$[$0]);
break;
case 78:
this.$=FORMISTR.funcionAumento($$[$0-2],'MAS');
break;
case 79:
this.$=FORMISTR.funcionAumento($$[$0-2],'MENOS');
break;
case 80:
this.$= FORMISTR.funcionswitchCase($$[$0-4], $$[$0-1]);
break;
case 81:
this.$= FORMISTR.funcionswitchCaseDefault($$[$0-6], $$[$0-3], s7);
break;
case 82:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 83:
 this.$ = [$$[$0]]; 
break;
case 84:
this.$= FORMISTR.funcionCase($$[$0-2]);
break;
case 85:
this.$=FORMISTR.funcionCaseBrake($$[$0-2], sentenciaBreakCase);
break;
case 86:
this.$= FORMISTR.functionDefault2($$[$0]);
break;
case 87:
this.$= FORMISTR.functionDefault();
break;
case 88:
this.$=	FORMISTR.funcionSentenciaBreakCase1($$[$0]);
break;
case 89:
this.$=	FORMISTR.funcionSentenciaBreakCase1($$[$0-2]);
break;
case 90:
this.$= 	FORMISTR.funcionSentenciaBreakCase3();
break;
case 91:
this.$= FORMISTR.funcionExpCadena1($$[$0-2], $$[$0]);console.log('expCadena Mas');
break;
case 92:
this.$= FORMISTR.funcionExpCadena2($$[$0]);console.log('expCadena cadena');
break;
case 93:
this.$= FORMISTR.funcionExpCadena3($$[$0]);console.log('expCadena exp');
break;
case 94:
this.$= FORMISTR.funcionEXP3($$[$0]);
break;
case 95:
this.$= FORMISTR.funcionEXP2($$[$0-2],$$[$0], '-');
break;
case 96:
this.$= FORMISTR.funcionEXP2($$[$0-2],$$[$0], '*');
break;
case 97:
this.$= FORMISTR.funcionEXP2($$[$0-2],$$[$0], '/');
break;
case 98:
this.$= FORMISTR.funcionEXP2($$[$0-2],$$[$0], '+');
break;
case 99:
this.$= FORMISTR.funcionEXP1($$[$0-2]);
break;
case 100:
 console.error('Este es un error sint√°ctico if: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
	 		erroresSintacticos.push(new Error( this._$.first_line ,this._$.first_column, yytext));
break;
case 101:
this.$= FORMISTR.newDato($$[$0],"int" );
break;
case 102:
this.$= FORMISTR.newDato($$[$0],"double" );
break;
case 103:
this.$= FORMISTR.newDato($$[$0],"char" );
break;
case 104:
this.$= FORMISTR.newDato($$[$0],"string" );
break;
case 105:
this.$= FORMISTR.funcionCondicionRelacional3($$[$0]);
break;
case 106:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-2], $$[$0], '<=');
break;
case 107:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-2], $$[$0],'>=');
break;
case 108:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-2], $$[$0], '>');console.log('condiRelacional>');
break;
case 109:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-2], $$[$0], '<');console.log('condiRelacional<');
break;
case 110:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-2], $$[$0], '==');console.log('condiRelacional==');
break;
case 111:
this.$= FORMISTR.funcionCondicionRelacional2($$[$0-3], $$[$0-1], '!=');console.log('condiRelacional !=');
break;
case 112:
this.$= FORMISTR.funcionBooleano('true');
break;
case 113:
this.$= FORMISTR.funcionBooleano('false');
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:8,8:$V0,15:5,17:6,18:7,21:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},{1:[3]},{5:[1,16],6:17,7:8,8:$V0,15:5,17:6,18:7,21:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},o($V7,[2,3]),o($V7,[2,4]),{16:18,19:19,20:20,21:[1,21],26:22},o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),{21:[2,39]},{21:[2,40]},{21:[2,41]},{21:[2,42]},{21:[2,43]},{22:$V8},{9:[1,25],21:[1,24]},{1:[2,1]},o($V7,[2,2]),o($V7,[2,7]),o($V7,[2,11]),o($V7,[2,12]),o($V9,$Va,{10:[1,27],22:$Vb}),{24:[1,28],27:$Vc},{10:$Vd,21:$Ve,23:30,28:31,29:32,33:$Vf,34:$Vg,40:$Vh,74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:[1,44]},{10:[1,45]},{10:$Vd,21:$Ve,23:46,28:31,29:32,33:$Vf,34:$Vg,40:$Vh,74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{11:[1,49],15:50,35:48,37:47,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},o($Vm,[2,17]),{21:[1,51]},{24:[1,52]},o($Vn,[2,20],{32:$Vo}),o($Vn,[2,21]),o($Vp,[2,92]),o([11,24,70,71,72,92],$Vq,{32:$Vr,75:$Vs,84:$Vt,85:$Vu}),o([11,24,32,75,84,85],$Vv,{10:$Vw}),{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:59,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{2:[1,62],10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:61,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},o($Vy,[2,101]),o($Vy,[2,102]),o($Vy,[2,103]),o($Vy,[2,105]),o($Vy,[2,112]),o($Vy,[2,113]),{11:[1,64],15:50,35:63,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},{11:[1,65]},{24:[1,66]},o($V7,[2,33]),{11:[1,67],27:$Vz},{12:[1,69]},{21:[1,70]},o([11,24,27],[2,18]),o($Vm,[2,13]),{10:$Vd,21:$Vx,28:71,33:$Vf,34:$Vg,40:$Vh,74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:72,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:73,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:74,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:75,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{11:[1,78],21:[1,79],26:77,30:76},o($Vy,[2,94]),o($Vy,$Vv),{11:[1,80],32:$Vr,75:$Vs,84:$Vt,85:$Vu},{11:[1,81]},{11:[1,82],27:$Vz},{12:[1,83]},{12:[1,84]},o($Vm,[2,16]),{12:[1,85]},{15:86,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},{15:105,17:104,21:$VA,25:96,29:97,36:87,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VH,[2,37]),o($Vp,[2,91]),o([11,24,32,70,71,72,75,88,89,90,91,92],[2,95],{84:$Vt,85:$Vu}),o($Vy,[2,96]),o($Vy,[2,97]),o([11,24,32,70,71,72,88,89,90,91,92],[2,98],{75:$Vs,84:$Vt,85:$Vu}),o($Vn,[2,22]),{11:[1,107],27:$Vc},o($Vn,[2,24]),o($VH,$Va),o($Vy,[2,99]),o($Vy,[2,100]),{12:[1,108]},{14:[1,109],15:105,17:104,21:$VA,25:96,29:97,36:110,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{13:[1,111],14:[1,112]},{15:105,17:104,21:$VA,25:96,29:97,36:113,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{21:[1,114]},{14:[1,115],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VI,[2,61]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),o($VI,[2,48],{60:[1,117]}),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),{24:[1,118]},{10:[1,119]},{12:[1,120]},{10:[1,121]},{10:[1,122]},{10:[1,123]},{53:[1,124]},o($VK,[2,14]),{19:125,21:[1,126],26:22},{10:$Vw,22:$V8},o($Vn,[2,23]),{14:[1,128],15:105,17:104,21:$VA,25:96,29:97,36:127,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($V7,[2,31]),{14:[1,129],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{14:[1,130]},o($V7,[2,6]),{14:[1,131],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VH,[2,36]),o($V7,[2,35]),o($VI,[2,60]),{12:[1,132]},o($VJ,[2,52]),{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,62:133,69:134,72:$VL,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:138,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{15:105,17:104,21:$V1,25:139,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6},{21:[1,140]},{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,62:141,69:134,72:$VL,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{54:[1,142]},o($VK,[2,15]),o($V9,$Va,{22:$Vb}),{14:[1,143],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($V7,[2,30]),o($V7,[2,32]),o($V7,[2,5]),o($V7,[2,34]),{14:[1,145],15:105,17:104,21:$VA,25:96,29:97,36:144,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{11:[1,146]},o($Vn,[2,75],{70:[1,147],71:[1,148]}),{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,69:149,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},o([72,92],$Vq,{32:$Vr,75:$Vs,84:$Vt,85:$Vu,88:[1,150],89:[1,151],90:[1,152],91:[1,153]}),{32:$Vo,72:[1,155],92:[1,154]},{14:[1,156]},{24:[1,157]},{11:[1,158]},{11:[1,159]},{10:[1,160]},o($V7,[2,29]),{14:[1,161],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VJ,[2,63]),{12:[1,162]},{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,69:163,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,69:164,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},o($Vn,[2,74]),{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:165,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:166,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:167,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:168,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,28:169,33:$Vf,34:$Vg,40:$Vh,74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{22:[1,170]},{65:[1,171]},{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,62:172,69:134,72:$VL,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{12:[1,173]},{12:[1,175],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:174,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{10:$Vd,21:$Ve,23:178,28:31,29:32,33:$Vf,34:$Vg,40:$Vh,55:176,56:[1,177],74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},o($VJ,[2,62]),{15:105,17:104,21:$VA,25:96,29:97,36:179,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($Vn,[2,72]),o($Vn,[2,73]),o($VM,[2,106],{32:$Vr,75:$Vs,84:$Vt,85:$Vu}),o($VM,[2,107],{32:$Vr,75:$Vs,84:$Vt,85:$Vu}),o($VM,[2,108],{32:$Vr,75:$Vs,84:$Vt,85:$Vu}),o($VM,[2,109],{32:$Vr,75:$Vs,84:$Vt,85:$Vu}),o($VM,[2,110],{32:$Vo}),{10:$Vd,21:$Vx,28:180,33:$Vf,34:$Vg,40:$Vh,74:34,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:[1,181]},{24:[1,182]},{77:183,79:184,80:$VN},o($VJ,[2,64]),{14:[1,187],15:105,17:104,21:$VA,25:96,29:97,36:186,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:88,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},{11:[1,188]},{11:[2,54]},{11:[2,55]},{14:[1,189],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VM,[2,111],{32:$Vo}),{10:$Vd,21:$Vx,28:137,33:$Vf,34:$Vg,40:$Vh,62:190,69:134,72:$VL,74:136,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,68:191,73:192,74:193,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{14:[1,194],78:195,79:196,80:$VN,83:[1,197]},o($VO,[2,83]),{21:[1,198]},{14:[1,199],15:105,17:104,21:$VA,25:96,29:97,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:116,45:89,46:90,47:91,48:92,49:93,50:94,51:95,52:$VB,61:$VC,65:$VD,66:$VE,67:$VF,76:$VG},o($VJ,[2,66]),{24:[1,200]},o($VJ,[2,69]),{11:[1,201]},{11:[1,202]},{11:[2,76]},{11:[2,77],32:[1,203],75:[1,204],84:$Vt,85:$Vu},o($VJ,[2,80]),{24:[1,205]},o($VO,[2,82]),{81:[1,206]},{81:[1,207]},o($VJ,[2,65]),o($VJ,[2,53]),{24:[1,208]},{12:[1,209]},{10:$Vd,21:$Vx,32:[1,210],34:$Vg,40:$Vh,74:75,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},{10:$Vd,21:$Vx,34:$Vg,40:$Vh,74:72,75:[1,211],86:$Vj,87:41,93:$Vk,94:$Vl},{14:[1,212]},{13:$VP,24:[2,87],64:$VQ,82:213},{13:$VP,24:[1,216],64:$VQ,82:217},o($VJ,[2,70]),{13:[1,218]},{11:[2,78]},{10:$Vd,11:[2,79],21:$Vx,34:$Vg,40:$Vh,74:59,75:$Vi,86:$Vj,87:41,93:$Vk,94:$Vl},o($VJ,[2,81]),{24:[2,86]},o($VR,[2,88],{64:[1,219]}),{24:[1,220]},o($VO,[2,84]),o($VO,[2,85]),{14:[1,221]},{24:[1,222]},o($VR,[2,90]),o($VJ,[2,71]),o($VR,[2,89])],
defaultActions: {9:[2,39],10:[2,40],11:[2,41],12:[2,42],13:[2,43],16:[2,1],177:[2,54],178:[2,55],192:[2,76],210:[2,78],213:[2,86]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Error = require('./Error.js');
	var erroresLexicos = [];
	var variables=[];

	var id;
	var html1='';
	var erroresSintacticos = [];
	var variables1=[];
	var VariableN= require('./Variable.js');
	const TIPOSVALORES	= require('./nombrarDato').TIPOSVALORES;
	const VALORCONDICIONAL_Y_LOGICO	= require('./nombrarDato').VALORCONDICIONAL_Y_LOGICO;
	const FORMISTR= require('./nombrarDato').formarInstrucciones;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// COMENTARIOMULTILINEA
break;
case 1:// COMENTARIOSIMPLE
break;
case 2:console.log('Token: INT, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+ 'INT'); return 39;
break;
case 3:console.log('Token: DOUBLE, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+ ' DOUBLE');return 40;
break;
case 4:console.log('Token: CHAR, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+ ' CHAR');return 42;
break;
case 5:console.log('Token: BOOL, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+ ' BOOL');return 43;
break;
case 6:console.log('Token: STRING, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+"STRING");return 41;
break;
case 7:console.log('Token: VOID, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+ 'VOID'); return 8;
break;
case 8:console.log('Token: MAIN, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 9;
break;
case 9:console.log('Token: CONSOLE,, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 52;
break;
case 10:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 54
break;
case 11:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 76;
break;
case 12:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 80;
break;
case 13:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 83;
break;
case 14:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 67;
break;
case 15:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 'PRINT';
break;
case 16:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 65;
break;
case 17:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 66;
break;
case 18:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 'RETURN';
break;
case 19:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 64;
break;
case 20:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 'CONTINUE';
break;
case 21:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 61;
break;
case 22:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 60;
break;
case 23:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 70;
break;
case 24:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 71;
break;
case 25:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 72;
break;
case 26:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 32;
break;
case 27:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 75;
break;
case 28:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 84;
break;
case 29:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 85;
break;
case 30:console.log('Token: PTCOMA Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 24;
break;
case 31:console.log('Token: PARABRE, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column); return 10;
break;
case 32:console.log('Token: PARCIERRA, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 11;
break;
case 33:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 'CORIZQ';
break;
case 34:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 'CORDER';
break;
case 35:console.log('Token: LAVEABRE, Lexema: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 12;
break;
case 36:console.log('Token: LLABECIERRA, Lexema ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 14;
break;
case 37:console.log('Token: DOSPUNTOS, Lexema' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 81;
break;
case 38:console.log('Token: PUNTO, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 53;
break;
case 39:console.log('Token: COMA: Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 27;
break;
case 40:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 89;
break;
case 41:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 88;
break;
case 42:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 92;
break;
case 43:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 91;
break;
case 44:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 90;
break;
case 45:console.log('Token: IGUAL, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 22;
break;
case 46:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 93;
break;
case 47:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 94;
break;
case 48:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 34;
break;
case 49:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 40;
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);console.log('Token: CADENA, Lexema:' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column); return 33; 
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);console.log('Token: html : ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column); return 56; 
break;
case 52:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column);return 86;
break;
case 53:console.log('Token: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ' columna: ' + yy_.yylloc.first_column+" ID");return 21;
break;
case 54:// se ignoran espacios en blanco            
break;
case 55:return 5;
break;
case 56:console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\/\/.*)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:print\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:break;)/i,/^(?:continue;)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:&&)/i,/^(?:[|][|])/i,/^(?:[!])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:[.])/i,/^(?:,)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:'[a-zA-Z]'\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\s+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}